@page
@model eCashier.Pages.OrderPages.IndexModel

@{
    ViewData["Title"] = "Index";
}

<div class="card">
    <h3 class="card-header">Index</h3>
    <div class="card-body">
        <a class="btn btn-success mb-3" asp-page="Create">New order</a>
        <table class="table">
            <thead class="table-dark">
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.Order[0].Reference)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Order[0].Customer)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Order[0].Customer.StudentId)
                    </th>
                    @* <th>
                        @Html.DisplayNameFor(model => model.ItemOrders[0].Quantity)
                    </th> *@
                    <th>
                        @Html.DisplayNameFor(model => model.Order[0].Items)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Order[0].CreatedOn)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Order[0].InternalNote)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.Order[0].CheckoutUrl)
                    </th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var order in Model.Order)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => order.Reference)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => order.Customer.FullName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => order.Customer.StudentId)
                        </td>
                        @* <td>
                            @foreach (var itemOrder in order.ItemOrders)
                            {
                                <div>@Html.DisplayFor(modelItem => itemOrder.Quantity)</div>
                            }
                        </td> *@
                        <td>
                            @foreach (var item in order.Items)
                            {
                                <div>@Html.DisplayFor(modelItem => item.Name)</div>
                            }
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => order.CreatedOn)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => order.InternalNote)
                        </td>
                        <td>
                            <a class="btn btn-outline-secondary js-copy-btn">@Html.DisplayFor(modelItem => order.CheckoutUrl)</a>
                        </td>
                        <td>
                            <a class="btn btn-warning" asp-page="./Edit" asp-route-id="@order.Id">Edit</a>
                            <a class="btn btn-primary" asp-page="./Details" asp-route-id="@order.Id">Details</a>
                            <a class="btn btn-danger" asp-page="./Delete" asp-route-id="@order.Id">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@section Scripts {
    <script>
        function fallbackCopyTextToClipboard(text, button) {
            var textArea = document.createElement("textarea");
            textArea.value = text;

            // Avoid scrolling to bottom
            textArea.style.top = "0";
            textArea.style.left = "0";
            textArea.style.position = "fixed";

            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();

            try {
                var successful = document.execCommand('copy');
                var msg = successful ? 'successful' : 'unsuccessful';
                console.log('Fallback: Copying text command was ' + msg);
                if (successful) {
                    updateButtonText(button);
                }
            } catch (err) {
                console.error('Fallback: Oops, unable to copy', err);
            }

            document.body.removeChild(textArea);
        }

        function copyTextToClipboard(text, button) {
            if (!navigator.clipboard) {
                fallbackCopyTextToClipboard(text, button);
                return;
            }
            navigator.clipboard.writeText(text).then(function () {
                console.log('Async: Copying to clipboard was successful!');
                updateButtonText(button);
            }, function (err) {
                console.error('Async: Could not copy text: ', err);
            });
        }

        function updateButtonText(button) {
            button.textContent = 'Copied!';

            setTimeout(() => {
                button.textContent = 'Click to copy';
            }, 2000);
        }

        // Wait for the DOM to be fully loaded
        document.addEventListener('DOMContentLoaded', function () {
            // Find all copy buttons
            document.querySelectorAll('.js-copy-btn').forEach(button => {
                // Store the original URL as a data attribute
                const originalUrl = button.textContent.trim();
                button.setAttribute('data-url', originalUrl);

                // Set initial text
                button.textContent = 'Click to copy';

                // Add click handler
                button.addEventListener('click', function (event) {
                    event.preventDefault();
                    const urlToCopy = this.getAttribute('data-url');
                    copyTextToClipboard(urlToCopy, this);
                });
            });
        });
    </script>
}